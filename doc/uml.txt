@startuml
skinparam classAttributeIconSize 0
hide empty fields
hide empty methods

abstract class Bot {
+ {abstract} best_move(Game &game): Move
}

class BumblingBuffoonBot {
+ best_move(Game &game): Move
}
BumblingBuffoonBot <|-u- Bot

class SlightlyCompetentBot {
+ best_move(Game &game): Move
}
SlightlyCompetentBot <|-u- Bot

class AverageCsStudentBot {
+ best_move(Game &game): Move
}
AverageCsStudentBot <|-u- Bot

class Eval {
+move: int
+ev: int
}

class ChuckNorrisBot {
- board: char[8][8]
- castling: bool[4]
- en_passent_good: bool[4]
+ black_turn: bool
+ best_move(Game &game): Move
+ alpha_beta(int alpha, int beta, int depth): Eval
+ to_board(): Board
+ move(int move)
+ undo_move(int move, bool is_enpassent, char captured)
+ uncompress_move(int m): Move
+ compress_move(Move m): int
+ legal_moves(vector<int> &final_moves)
+ is_check(bool black): bool
+ is_checkmate(): bool
+ is_stalemate(): bool
+ best_move(Game &game): Move
}
ChuckNorrisBot <|-u- Bot


class Board {
+ to_move: Player
+ can_castle: bool[4]
+ en_passent_square: Point
+ half_move: int
+ full_move: int
- possible_moves(): vector<Move>
- pieces: unique_ptr<Piece>[8][8]
+ get(Point p): unique_ptr<Piece>&
+ legal_moves(): vector<Move>
+ is_check(): bool
+ is_checkmate(): bool
+ is_stalemate(): bool
+ make_move(Move m)
+ clone(): Board
+ fen(): string
}
Board "1" *--> "1" Player
Board "1" *--> "64" Piece
Board "1" *--> "1" Point

class Controller {
- setup: Setup
- white_wins: int
- black_wins: int
- draws: int
- white_bot: unique_ptr<Bot>
- black_bot: unique_ptr<Bot>
+ game: Game
- run_setup()
- run_game()
+ command_loop()
}
Controller -u-|> Subject
Controller "1" *--> "1" Setup
Controller "1" *--> "1" Game
Controller "1" *--> "2" Bot

enum Player {
White
Black
}

class Game {
- move_history: vector<Board>
+ board: Board
+ resigned: bool
+ make_move(Move m)
+ undo_move()
}
Game "1" *--> "1.." Board

class Move {
+ from: Point
+ to: Point
+ has_promotes_to: bool
+ promotes_to: PieceType
+ uci(): string
+ piece(Board &b): unique_ptr<Piece>&
+ captured(Board &b): unique_ptr<Piece>&
}
Move "1" *--> "1" PieceType

abstract class Observer {
- subject: Subject &
+ {abstract} notify(Controller &controller)
}

class TextUi {
- subject: Subject
- use_unicode: bool
- show_debug: bool
- square_char(unique_ptr<Piece> &piece, Point p): string
- print_game(Game &game)
+ notify(Controller &controller)
}
TextUi -u-|> Observer
TextUi "1" o--> "1" Subject

class GraphicsUi {
- window: Xwindow
- board: char[8][8]
- subject: Subject
- display_game(Game &game)
- get_image(unique_ptr<Piece> &p): PixelImg&
+ notify(Controller &controller)
}
GraphicsUi -u-|> Observer
GraphicsUi "1" o--> "1" Subject
GraphicsUi "1" *--> "1" Xwindow

class Subject {
- games: vector<Observer*>
+ attach(Observer *o)
+ dettach(Observer *o)
+ notify_observers(Controller &controller)
}

Subject "1" o--> "0.." Observer

enum PieceType {
Pawn
Knight
Bishop
Rook
Queen
King
}

abstract class Piece {
+player: Player
+{abstract} possible_moves(Board &board, Point from): vector<Move>
+{abstract} piece_type(): PieceType
+{abstract} clone(): unique_ptr<Piece>
+{abstract} to_char(): char
}

class Pawn {
+player: Player
+possible_moves(Board &board, Point from): vector<Move>
+piece_type(): PieceType
+clone(): unique_ptr<Piece>
+to_char(): char
}
Pawn -u-|> Piece
Pawn "1" *--> "1" Player

class Knight {
+player: Player
+possible_moves(Board &board, Point from): vector<Move>
+piece_type(): PieceType
+clone(): unique_ptr<Piece>
+to_char(): char
}
Knight -u-|> Piece
Knight "1" *--> "1"Player

class Bishop {
+player: Player
+possible_moves(Board &board, Point from): vector<Move>
+piece_type(): PieceType
+clone(): unique_ptr<Piece>
+to_char(): char
}
Bishop -u-|> Piece
Bishop "1" *--> "1" Player

class Rook {
+player: Player
+possible_moves(Board &board, Point from): vector<Move>
+piece_type(): PieceType
+clone(): unique_ptr<Piece>
+to_char(): char
}
Rook -u-|> Piece
Rook "1" *--> "1" Player

class Queen {
+player: Player
+possible_moves(Board &board, Point from): vector<Move>
+piece_type(): PieceType
+clone(): unique_ptr<Piece>
+to_char(): char
}
Queen -u-|> Piece
Queen "1" *--> "1" Player

class King {
+player: Player
+possible_moves(Board &board, Point from): vector<Move>
+piece_type(): PieceType
+clone(): unique_ptr<Piece>
+to_char(): char
}
King -u-|> Piece
King "1" *--> "1" Player

class Point {
+x: int 
+y: int
+in_bounds(): bool
+algebraic(): string
}

class Setup {
- board: Board
+ set_to_move(Player player)
+ add_piece(Point point, PieceType piece, Player player)
+ remove_piece(Point point)
+ clear_pieces()
+ reset_board()
+ set_fen(string fen)
+ finish(): Game
}
Setup "1" *--> "1" Board
Setup "1" *--> "1" Player

class PixelImg {
+ data: vector<vector<int>>
+ width: int
+ height: int
}

class Xwindow {
-d: Display *
-w: Window
-s: int
-gc: GC
+fillRectangle(int x, int y, int w, int h, int color)
+drawImage(int x, int y, PixelImg &img)
+drawString(int x, int y, string msg)
+flush()
}

@enduml